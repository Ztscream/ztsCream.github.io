[{"content":"Spring Boot 云原生限流与监控实践作业说明 1. 作业说明 本项目基于 Spring Boot 开发 REST 应用，结合 Docker、Kubernetes、Jenkins、Prometheus、Grafana 等云原生技术，完成限流、CI/CD、监控与弹性扩展的全流程实践\n姓名 学号 联系方式 个人贡献 张堂升 231250137 13706811071 全部 2. 功能开发 2.1 实现 REST 接口 代码位置：src/main/java/io/daocloud/prometheustestdemo/PrometheusTestDemoController.java ``\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 package io.daocloud.prometheustestdemo; import com.google.common.util.concurrent.RateLimiter; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import java.util.HashMap; import java.util.Map; @RestController @RequestMapping(\u0026#34;/\u0026#34;) // 诊断性添加：尝试一个根路径映射 public class PrometheusTestDemoController { // 每秒允许100个请求 private final RateLimiter rateLimiter = RateLimiter.create(100.0); @GetMapping(\u0026#34;/hello\u0026#34;) public ResponseEntity\u0026lt;Map\u0026lt;String, String\u0026gt;\u0026gt; hello() { if (!rateLimiter.tryAcquire()) { // 如果未能获取到令牌，表示已达到限流，返回429 Too Many Requests return ResponseEntity.status(HttpStatus.TOO_MANY_REQUESTS).body(null); } Map\u0026lt;String, String\u0026gt; response = new HashMap\u0026lt;\u0026gt;(); response.put(\u0026#34;msg\u0026#34;, \u0026#34;hello\u0026#34;); return ResponseEntity.ok(response); } @GetMapping public ResponseEntity\u0026lt;Map\u0026lt;String, String\u0026gt;\u0026gt; root() { Map\u0026lt;String, String\u0026gt; response = new HashMap\u0026lt;\u0026gt;(); response.put(\u0026#34;msg\u0026#34;, \u0026#34;Welcome to root path\u0026#34;); return ResponseEntity.ok(response); } } 作用与原理\n：\n使用 @RestController 注解，自动注册为 Spring Web 控制器。 /hello 接口通过 @GetMapping(\u0026quot;/hello\u0026quot;) 暴露，返回固定 JSON：{\u0026quot;msg\u0026quot;: \u0026quot;hello\u0026quot;}。 根路径 / 也返回欢迎信息，便于健康检查。 测试方法\n：\n访问\n1 http://\u0026lt;服务地址\u0026gt;:\u0026lt;端口\u0026gt;/hello ，应返回：\n1 {\u0026#34;msg\u0026#34;: \u0026#34;hello\u0026#34;} ​ 2.2 实现限流控制 **\n代码位置**：同上 Controller\n作用与原理\n：\n集成 Guava 的 RateLimiter，设置每秒最大 100 次请求。 每次请求先 tryAcquire()，未获取到令牌则直接返回 429 状态码（Too Many Requests）。 测试方法\n：\n并发压测 /hello 接口，部分请求应返回 429。\n推荐压测命令或者以下test1.sh：\n1 seq 50000 | xargs -P 200 -I {} curl -s -o /dev/null -w \u0026#34;%{http_code}\\n\u0026#34; \u0026#34;http://\u0026lt;服务地址\u0026gt;:\u0026lt;端口\u0026gt;/hello\u0026#34; | sort | uniq -c 预期输出：200 和 429 的数量统计。\n2.3 暴露 Prometheus 指标 依赖配置：pom.xml 引入 spring-boot-starter-actuator 和 micrometer-registry-prometheus。 ``\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.1.13.RELEASE\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;!-- lookup parent from repository --\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;groupId\u0026gt;io.daocloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;prometheus-test-demo\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;prometheus-test-demo\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;Demo project for Spring Boot\u0026lt;/description\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;java.version\u0026gt;1.8\u0026lt;/java.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-registry-prometheus\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.google.guava\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;guava\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;31.1-jre\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;repositories\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;alimaven\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;aliyun maven\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://maven.aliyun.com/nexus/content/groups/public/\u0026lt;/url\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/repositories\u0026gt; \u0026lt;pluginRepositories\u0026gt; \u0026lt;pluginRepository\u0026gt; \u0026lt;id\u0026gt;aliyun-plugin\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;http://maven.aliyun.com/nexus/content/groups/public/\u0026lt;/url\u0026gt; \u0026lt;snapshots\u0026gt; \u0026lt;enabled\u0026gt;false\u0026lt;/enabled\u0026gt; \u0026lt;/snapshots\u0026gt; \u0026lt;/pluginRepository\u0026gt; \u0026lt;/pluginRepositories\u0026gt; \u0026lt;/project\u0026gt; 作用与原理\n：\nSpring Boot Actuator 自动暴露 /actuator/prometheus，包含 HTTP QPS、响应时间等指标。 关键指标： http_server_requests_seconds_count：接口请求次数（含状态码、方法等标签） http_server_requests_seconds_sum：接口响应时间总和 测试方法\n：\n访问 http://\u0026lt;服务地址\u0026gt;:\u0026lt;端口\u0026gt;/actuator/prometheus，应看到上述指标。 3. DevOps 流水线构建与部署 3.1 Dockerfile 构建镜像 文件：Dockerfile\n作用与原理\n：\n多阶段构建，先用 Maven 镜像编译，再用 JRE 镜像运行，减小镜像体积。 复制打包好的 JAR 到运行环境，设置启动命令。 测试方法\n：\ndocker build -t prometheus-test-demo:latest . docker run -p 8998:8998 prometheus-test-demo:latest ``\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # 第一阶段：构建阶段 FROM maven:3.8.7-eclipse-temurin-8 AS builder # 设置工作目录 WORKDIR /usr/src/mymaven # 复制 Maven 配置文件 RUN mkdir -p /root/.m2 COPY settings.xml /root/.m2/settings.xml # 复制pom.xml和源代码 COPY pom.xml . RUN mvn dependency:go-offline COPY src ./src # 构建项目 RUN mvn -B -DskipTests clean package # 第二阶段：运行阶段 FROM eclipse-temurin:8u372-b07-jre-centos7 # 设置时区 RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime RUN echo \u0026#39;Asia/Shanghai\u0026#39; \u0026gt;/etc/timezone # 设置环境变量 ENV JAVA_OPTS \u0026#39;\u0026#39; # 设置工作目录 WORKDIR /app # 从构建阶段复制构建结果 COPY --from=builder /usr/src/mymaven/target/prometheus-test-demo-0.0.1-SNAPSHOT.jar ./prometheus-test-demo-0.0.1-SNAPSHOT.jar # 启动命令 ENTRYPOINT [\u0026#34;sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;set -e \u0026amp;\u0026amp; java -XX:+PrintFlagsFinal \\ -XX:+HeapDumpOnOutOfMemoryError \\ -XX:HeapDumpPath=/heapdump/heapdump.hprof \\ -XX:+UnlockExperimentalVMOptions \\ -XX:+UseCGroupMemoryLimitForHeap \\ $JAVA_OPTS -jar prometheus-test-demo-0.0.1-SNAPSHOT.jar\u0026#34;] 3.2 Kubernetes YAML 文件 文件：jenkins/scripts/prometheus-test-demo.yaml、prometheus-test-serviceMonitor.yaml ``\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 apiVersion: apps/v1 kind: Deployment metadata: labels: app: prometheus-test-demo name: prometheus-test-demo namespace: {NAMESPACE} spec: replicas: 2 selector: matchLabels: app: prometheus-test-demo template: metadata: annotations: prometheus.io/path: /actuator/prometheus prometheus.io/port: \u0026#34;8998\u0026#34; prometheus.io/scheme: http prometheus.io/scrape: \u0026#34;true\u0026#34; labels: app: prometheus-test-demo spec: containers: - image: 172.22.83.19:30003/nju05/prometheus-test-demo:{VERSION} name: prometheus-test-demo imagePullPolicy: IfNotPresent resources: limits: cpu: \u0026#34;500m\u0026#34; memory: \u0026#34;512Mi\u0026#34; requests: cpu: \u0026#34;200m\u0026#34; memory: \u0026#34;256Mi\u0026#34; --- apiVersion: v1 kind: Service metadata: name: prometheus-test-demo labels: app: prometheus-test-demo namespace: {NAMESPACE} spec: type: NodePort selector: app: prometheus-test-demo ports: - name: tcp protocol: TCP port: 8998 targetPort: 8998 ``\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata: labels: k8s-app: prometheus-test-demo name: prometheus-test-demo namespace: {MONITOR_NAMESPACE} spec: endpoints: - interval: 30s port: tcp path: /actuator/prometheus scheme: \u0026#39;http\u0026#39; selector: matchLabels: app: prometheus-test-demo namespaceSelector: matchNames: - {NAMESPACE} 作用与原理\n：\nDeployment：定义副本数、镜像、端口、资源限制等。 Service：暴露 NodePort 端口，供外部访问。 ServiceMonitor：Prometheus 自动发现并采集 /actuator/prometheus 指标。 测试方法\n：\nkubectl apply -f prometheus-test-demo.yaml kubectl apply -f prometheus-test-serviceMonitor.yaml kubectl get svc 查看服务端口 3.3 Jenkins CI/CD 流水线 文件：Jenkinsfile ``\npipeline { agent none // 环境变量管理 environment { HARBOR_REGISTRY = \u0026#39;172.22.83.19:30003\u0026#39; IMAGE_NAME = \u0026#39;nju05/prometheus-test-demo\u0026#39; GIT_REPO = \u0026#39;https://gitee.com/ztsCream/prometheus-test-demo.git\u0026#39; NAMESPACE = \u0026#39;nju05\u0026#39; MONITOR_NAMESPACE = \u0026#39;nju05\u0026#39; HARBOR_USER = \u0026#39;nju05\u0026#39; } parameters { string(name: \u0026#39;HARBOR_PASS\u0026#39;, defaultValue: \u0026#39;\u0026#39;, description: \u0026#39;Harbor login password\u0026#39;) } stages { stage(\u0026#39;Clone Code\u0026#39;) { agent { label \u0026#39;master\u0026#39; } steps { echo \u0026#34;1.Git Clone Code\u0026#34; script { try { git url: \u0026#34;${env.GIT_REPO}\u0026#34; } catch (Exception e) { error \u0026#34;Git clone failed: ${e.getMessage()}\u0026#34; } } } } stage(\u0026#39;Maven Test\u0026#39;) { agent { docker { image \u0026#39;maven:3-alpine\u0026#39; args \u0026#39;-v /root/.m2:/root/.m2\u0026#39; } } steps { echo \u0026#34;2. Maven Test Stage\u0026#34; script { try { sh \u0026#34;mvn test\u0026#34; } catch (Exception e) { error \u0026#34;Maven test failed: ${e.getMessage()}\u0026#34; } } } } stage(\u0026#39;Check JAR Content\u0026#39;) { agent { docker { image \u0026#39;maven:3-alpine\u0026#39; args \u0026#39;-v /root/.m2:/root/.m2\u0026#39; } } steps { echo \u0026#34;检查 JAR 包是否包含 PrometheusTestDemoController.class\u0026#34; sh \u0026#39;mvn clean package -DskipTests\u0026#39; sh \u0026#39;jar tf target/prometheus-test-demo-0.0.1-SNAPSHOT.jar | grep PrometheusTestDemoController || echo \u0026#34;NOT FOUND\u0026#34;\u0026#39; } } stage(\u0026#39;Image Build\u0026#39;) { agent { label \u0026#39;master\u0026#39; } steps { echo \u0026#34;2.Image Build Stage (包含 Maven 构建)\u0026#34; script { try { // 使用 Dockerfile 多阶段构建，包含 Maven 构建和镜像构建 sh \u0026#34;docker build --no-cache --cache-from ${env.HARBOR_REGISTRY}/${env.IMAGE_NAME}:latest -t ${env.HARBOR_REGISTRY}/${env.IMAGE_NAME}:${BUILD_NUMBER} -t ${env.HARBOR_REGISTRY}/${env.IMAGE_NAME}:latest .\u0026#34; } catch (Exception e) { error \u0026#34;Docker build failed: ${e.getMessage()}\u0026#34; } } } } stage(\u0026#39;Push\u0026#39;) { agent { label \u0026#39;master\u0026#39; } steps { echo \u0026#34;3.Push Docker Image Stage\u0026#34; script { try { sh \u0026#34;echo \u0026#39;${HARBOR_PASS}\u0026#39; | docker login --username=${HARBOR_USER} --password-stdin ${env.HARBOR_REGISTRY}\u0026#34; sh \u0026#34;docker push ${env.HARBOR_REGISTRY}/${env.IMAGE_NAME}:${BUILD_NUMBER}\u0026#34; sh \u0026#34;docker push ${env.HARBOR_REGISTRY}/${env.IMAGE_NAME}:latest\u0026#34; } catch (Exception e) { error \u0026#34;Docker push failed: ${e.getMessage()}\u0026#34; } } } } stage(\u0026#39;Deploy to Kubernetes\u0026#39;) { agent { label \u0026#39;slave\u0026#39; } steps { container(\u0026#39;jnlp-kubectl\u0026#39;) { script { stage(\u0026#39;Clone YAML\u0026#39;) { echo \u0026#34;4. Git Clone YAML To Slave\u0026#34; try { // 使用 checkout scm 获取当前流水线的源代码 checkout scm } catch (Exception e) { error \u0026#34;Git clone on slave failed: ${e.getMessage()}\u0026#34; } } stage(\u0026#39;Config YAML\u0026#39;) { echo \u0026#34;5. Change YAML File Stage\u0026#34; sh \u0026#39;sed -i \u0026#34;s/{VERSION}/${BUILD_NUMBER}/g\u0026#34; ./jenkins/scripts/prometheus-test-demo.yaml\u0026#39; sh \u0026#39;sed -i \u0026#34;s/{NAMESPACE}/${NAMESPACE}/g\u0026#34; ./jenkins/scripts/prometheus-test-demo.yaml\u0026#39; sh \u0026#39;sed -i \u0026#34;s/{MONITOR_NAMESPACE}/${MONITOR_NAMESPACE}/g\u0026#34; ./jenkins/scripts/prometheus-test-serviceMonitor.yaml\u0026#39; sh \u0026#39;sed -i \u0026#34;s/{NAMESPACE}/${NAMESPACE}/g\u0026#34; ./jenkins/scripts/prometheus-test-serviceMonitor.yaml\u0026#39; sh \u0026#39;cat ./jenkins/scripts/prometheus-test-demo.yaml\u0026#39; sh \u0026#39;cat ./jenkins/scripts/prometheus-test-serviceMonitor.yaml\u0026#39; } stage(\u0026#39;Deploy prometheus-test-demo\u0026#39;) { echo \u0026#34;6. Deploy To K8s Stage\u0026#34; sh \u0026#39;kubectl apply -f ./jenkins/scripts/prometheus-test-demo.yaml\u0026#39; } stage(\u0026#39;Deploy prometheus-test-demo ServiceMonitor\u0026#39;) { echo \u0026#34;7. Deploy ServiceMonitor To K8s Stage\u0026#34; try { sh \u0026#39;kubectl apply -f ./jenkins/scripts/prometheus-test-serviceMonitor.yaml\u0026#39; } catch (Exception e) { error \u0026#34;ServiceMonitor deployment failed: ${e.getMessage()}\u0026#34; } } stage(\u0026#39;Health Check\u0026#39;) { echo \u0026#34;8. Health Check Stage\u0026#34; try { sh \u0026#34;kubectl wait --for=condition=ready pod -l app=prometheus-test-demo -n ${NAMESPACE} --timeout=300s\u0026#34; echo \u0026#34;Application is healthy and ready!\u0026#34; } catch (Exception e) { error \u0026#34;Health check failed: ${e.getMessage()}\u0026#34; } } } } } } } // 通知机制和清理 post { success { echo \u0026#39;🎉 Pipeline succeeded! Application deployed successfully.\u0026#39; script { echo \u0026#34;✅ Deployment Summary:\u0026#34; echo \u0026#34; - Image: ${env.HARBOR_REGISTRY}/${env.IMAGE_NAME}:${BUILD_NUMBER}\u0026#34; echo \u0026#34; - Namespace: ${NAMESPACE}\u0026#34; echo \u0026#34; - Monitor Namespace: ${MONITOR_NAMESPACE}\u0026#34; } } failure { echo \u0026#39;❌ Pipeline failed! Please check the logs for details.\u0026#39; } always { echo \u0026#39;🔄 Pipeline execution completed.\u0026#39; // 清理本地镜像以节省磁盘空间 script { node(\u0026#39;master\u0026#39;) { // 确保在master节点上执行，并提供FilePath上下文 try { sh \u0026#34;docker rmi ${env.HARBOR_REGISTRY}/${env.IMAGE_NAME}:${BUILD_NUMBER} || true\u0026#34; sh \u0026#34;docker rmi ${env.HARBOR_REGISTRY}/${env.IMAGE_NAME}:latest || true\u0026#34; sh \u0026#34;docker system prune -f || true\u0026#34; } catch (Exception e) { echo \u0026#34;Image cleanup failed: ${e.getMessage()}\u0026#34; } } } } } } 作用与原理\n：\nCI 阶段：拉取代码、Maven 构建、单元测试、构建并推送 Docker 镜像到 Harbor。 CD 阶段：拉取镜像、kubectl apply 部署到 K8s，检查部署状态。 测试方法\n：\nJenkins 新建 Pipeline，配置源码和凭据，运行流水线。 日志中应看到构建、推送、部署、健康检查等步骤。 4. 监控与弹性扩展实践 4.1 Prometheus 指标采集 原理\n：\nServiceMonitor 让 Prometheus 自动发现 K8s 服务，采集 /actuator/prometheus。 测试方法\n：\nPrometheus UI 查询 http_server_requests_seconds_count 等指标。 4.2 Grafana 监控面板 原理\n：\n通过 Prometheus 数据源，创建 Dashboard 展示 CPU、内存、JVM、QPS、响应时间等。 测试方法\n：\nGrafana 新建 Dashboard，添加相关图表。 参考指标：process_cpu_usage、jvm_memory_used_bytes、http_server_requests_seconds_count 等。 4.3 压测与监控验证 方法\n：\n使用并发 curl 或 ab 工具压测 /hello。 在 Grafana 面板观察 QPS、响应时间、429 错误率等变化。 预期现象\n：\nQPS 峰值接近 100，超出部分出现 429。 JVM、CPU、内存等指标随负载变化。 5. 关键代码与配置说明 5.1 Controller 限流核心代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @RestController @RequestMapping(\u0026#34;/\u0026#34;) public class PrometheusTestDemoController { private final RateLimiter rateLimiter = RateLimiter.create(100.0); @GetMapping(\u0026#34;/hello\u0026#34;) public ResponseEntity\u0026lt;Map\u0026lt;String, String\u0026gt;\u0026gt; hello() { if (!rateLimiter.tryAcquire()) { return ResponseEntity.status(HttpStatus.TOO_MANY_REQUESTS).body(null); } Map\u0026lt;String, String\u0026gt; response = new HashMap\u0026lt;\u0026gt;(); response.put(\u0026#34;msg\u0026#34;, \u0026#34;hello\u0026#34;); return ResponseEntity.ok(response); } } 实现原理：Guava RateLimiter 控制每秒最大请求数，超限即返回 429。 5.2 Prometheus 指标暴露 依赖\n：\n1 2 3 4 5 6 7 8 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-registry-prometheus\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 配置\n：\n1 application.properties 增加\n1 2 3 4 management.endpoints.web.exposure.include=* management.endpoint.prometheus.enabled=true management.metrics.export.prometheus.enabled=true server.port=8998 5.3 Dockerfile 示例 1 2 3 4 5 6 7 8 9 FROM maven:3.8.5-openjdk-8 AS build WORKDIR /app COPY . . RUN mvn clean package -DskipTests FROM openjdk:8-jre-alpine WORKDIR /app COPY --from=build /app/target/*.jar app.jar EXPOSE 8998 ENTRYPOINT [\u0026#34;java\u0026#34;, \u0026#34;-jar\u0026#34;, \u0026#34;app.jar\u0026#34;] 5.4 K8s Deployment 片段 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 apiVersion: apps/v1 kind: Deployment metadata: name: prometheus-test-demo spec: replicas: 2 selector: matchLabels: app: prometheus-test-demo template: metadata: labels: app: prometheus-test-demo spec: containers: - name: app image: \u0026lt;Harbor地址\u0026gt;/library/prometheus-test-demo:{VERSION} ports: - containerPort: 8998 resources: limits: cpu: \u0026#34;1\u0026#34; memory: \u0026#34;512Mi\u0026#34; requests: cpu: \u0026#34;0.2\u0026#34; memory: \u0026#34;128Mi\u0026#34; 5.5 Jenkinsfile 片段 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 pipeline { agent any stages { stage(\u0026#39;Build\u0026#39;) { steps { sh \u0026#39;mvn clean package -DskipTests\u0026#39; } } stage(\u0026#39;Docker Build \u0026amp; Push\u0026#39;) { steps { sh \u0026#39;docker build -t \u0026lt;Harbor地址\u0026gt;/library/prometheus-test-demo:${BUILD_NUMBER} .\u0026#39; sh \u0026#39;docker push \u0026lt;Harbor地址\u0026gt;/library/prometheus-test-demo:${BUILD_NUMBER}\u0026#39; } } stage(\u0026#39;Deploy to K8s\u0026#39;) { steps { sh \u0026#39;kubectl apply -f jenkins/scripts/prometheus-test-demo.yaml\u0026#39; } } } } 5.6 ServiceMonitor 片段 1 2 3 4 5 6 7 8 9 10 11 12 apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata: name: prometheus-test-demo spec: selector: matchLabels: app: prometheus-test-demo endpoints: - port: http path: /actuator/prometheus interval: 30s 6. 测试成功后的返回示例 访问\n1 /hello ：\n1 {\u0026#34;msg\u0026#34;: \u0026#34;hello\u0026#34;} 并发压测后统计：\n1 2 12345 200 37655 429 访问\n1 /actuator/prometheus ：\n1 2 3 4 # HELP http_server_requests_seconds_count ... http_server_requests_seconds_count{...method=\u0026#34;GET\u0026#34;,uri=\u0026#34;/hello\u0026#34;,status=\u0026#34;200\u0026#34;...} 12345 http_server_requests_seconds_count{...method=\u0026#34;GET\u0026#34;,uri=\u0026#34;/hello\u0026#34;,status=\u0026#34;429\u0026#34;...} 37655 ... 7. 总结 本项目完整实现了 REST 接口、限流、Prometheus 指标暴露、Docker 镜像、K8s 部署、Jenkins CI/CD、ServiceMonitor 自动采集、Grafana 监控等云原生全流程。所有功能均可通过实际访问和监控面板验证。\n","date":"0001-01-01T00:00:00Z","permalink":"https://ztsCream.github.io/p/","title":""},{"content":"在 Minikube 上部署 Eureka 微服务架构 本指南详细说明如何使用 Spring Boot 开发 Eureka Server、Admin Service 和 User Service 三个微服务，并通过 Docker 和 Kubernetes（Minikube）部署。包括服务注册、API 开发、Docker 镜像构建和 Kubernetes 部署的完整步骤。\n环境准备 假设您在 minikube-user@iZgc71t4gsaxrqcyesrotqZ:~$ 环境下操作，并已安装以下工具：\nJava 17 Maven Docker kubectl Minikube 验证环境 运行以下命令确认环境：\n1 2 3 4 5 java -version # 应显示 Java 17 mvn -v # 应显示 Maven 版本 docker --version # 应显示 Docker 版本 minikube status # 确保 Minikube 运行 kubectl version # 确认 kubectl 已安装 若缺少工具，安装示例：\n1 2 3 4 5 6 7 8 9 10 # 安装 Java 17 sudo apt update sudo apt install openjdk-17-jdk # 安装 Maven sudo apt install maven # 安装 Docker sudo apt install docker.io sudo usermod -aG docker minikube-user 启动 Minikube（若未启动）：\n1 minikube start 配置 Minikube 使用本地 Docker：\n1 eval $(minikube docker-env) 步骤 1：创建 Spring Boot 项目 为 Eureka Server、Admin Service 和 User Service 创建三个独立项目。\n1.1 项目目录结构 1 mkdir -p ~/eureka-server ~/admin-service ~/user-service 1.2 Eureka Server 生成项目：\n1 2 cd ~/eureka-server mvn archetype:generate -DgroupId=com.example.eureka -DartifactId=eureka-server -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false POM 文件（~/eureka-server/pom.xml）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.example.eureka\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;eureka-server\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;eureka-server\u0026lt;/name\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.2.5\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-netflix-eureka-server\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2023.0.3\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; 主类（~/eureka-server/src/main/java/com/example/eureka/EurekaServerApplication.java）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 package com.example.eureka; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; @SpringBootApplication @EnableDiscoveryClient public class EurekaServerApplication { public static void main(String[] args) { SpringApplication.run(EurekaServerApplication.class, args); } } 配置文件（~/eureka-server/src/main/resources/application.yml）：\n1 2 3 4 5 6 7 8 server: port: 8761 eureka: instance: hostname: eureka-service client: register-with-eureka: false fetch-registry: false 1.3 Admin Service 生成项目：\n1 2 cd ~/admin-service mvn archetype:generate -DgroupId=com.example.admin -DartifactId=admin-service -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false POM 文件（~/admin-service/pom.xml）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.example.admin\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;admin-service\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;admin-service\u0026lt;/name\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.2.5\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-netflix-eureka-client\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-validation\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2023.0.3\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; 主类（~/admin-service/src/main/java/com/example/admin/AdminServiceApplication.java）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package com.example.admin; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.loadbalancer.LoadBalanced; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.context.annotation.Bean; import org.springframework.web.client.RestTemplate; @SpringBootApplication @EnableDiscoveryClient public class AdminServiceApplication { public static void main(String[] args) { SpringApplication.run(AdminServiceApplication.class, args); } @Bean @LoadBalanced public RestTemplate restTemplate() { return new RestTemplate(); } } 控制器（~/admin-service/src/main/java/com/example/admin/controller/UserController.java）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 package com.example.admin.controller; import jakarta.validation.constraints.NotBlank; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.client.RestTemplate; @RestController @RequestMapping(\u0026#34;/api/admin\u0026#34;) public class UserController { @Autowired private RestTemplate restTemplate; @PostMapping(\u0026#34;/users\u0026#34;) public ResponseEntity\u0026lt;String\u0026gt; addUser(@RequestBody UserDTO userDTO) { if (userDTO.getUsername() == null || userDTO.getUsername().isEmpty() || userDTO.getPassword() == null || userDTO.getPassword().isEmpty()) { return ResponseEntity.badRequest().body(\u0026#34;用户名或密码不能为空\u0026#34;); } String userServiceUrl = \u0026#34;http://user-service/api/users\u0026#34;; ResponseEntity\u0026lt;String\u0026gt; response = restTemplate.postForEntity(userServiceUrl, userDTO, String.class); return ResponseEntity.ok(response.getBody()); } public static class UserDTO { @NotBlank(message = \u0026#34;用户名不能为空\u0026#34;) private String username; @NotBlank(message = \u0026#34;密码不能为空\u0026#34;) private String password; public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String get輸入password() { return password; } public void setPassword(String password) { this.password = password; } } } 配置文件（~/admin-service/src/main/resources/application.yml）：\n1 2 3 4 5 6 7 8 9 server: port: 8081 spring: application: name: admin-service eureka: client: service-url: defaultZone: http://eureka-service:8761/eureka/ 1.4 User Service 生成项目：\n1 2 cd ~/user-service mvn archetype:generate -DgroupId=com.example.user -DartifactId=user-service -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false POM 文件（~/user-service/pom.xml）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.example.user\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;user-service\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;user-service\u0026lt;/name\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.2.5\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-netflix-eureka-client\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-data-jpa\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.h2database\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;h2\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2023.0.3\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; 主类（~/user-service/src/main/java/com/example/user/UserServiceApplication.java）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 package com.example.user; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; @SpringBootApplication @EnableDiscoveryClient public class UserServiceApplication { public static void main(String[] args) { SpringApplication.run(UserServiceApplication.class, args); } } 实体类（~/user-service/src/main/java/com/example/user/entity/User.java）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 package com.example.user.entity; import jakarta.persistence.Entity; import jakarta.persistence.GeneratedValue; import jakarta.persistence.GenerationType; import jakarta.persistence.Id; @Entity public class User { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; private String username; private String password; public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } } 仓库接口（~/user-service/src/main/java/com/example/user/repository/UserRepository.java）：\n1 2 3 4 5 6 7 package com.example.user.repository; import com.example.user.entity.User; import org.springframework.data.jpa.repository.JpaRepository; public interface UserRepository extends JpaRepository\u0026lt;User, Long\u0026gt; { } 控制器（~/user-service/src/main/java/com/example/user/controller/UserController.java）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 package com.example.user.controller; import com.example.user.entity.User; import com.example.user.repository.UserRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\u0026#34;/api/users\u0026#34;) public class UserController { @Autowired private UserRepository userRepository; @PostMapping public ResponseEntity\u0026lt;String\u0026gt; addUser(@RequestBody UserDTO userDTO) { User user = new User(); user.setUsername(userDTO.getUsername()); user.setPassword(userDTO.getPassword()); userRepository.save(user); return ResponseEntity.ok(\u0026#34;用户添加成功\u0026#34;); } public static class UserDTO { private String username; private String password; public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } } } 配置文件（~/user-service/src/main/resources/application.yml）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 server: port: 8082 spring: application: name: user-service datasource: url: jdbc:h2:mem:userdb driver-class-name: org.h2.Driver username: sa password: jpa: database-platform: org.hibernate.dialect.H2Dialect hibernate: ddl-auto: update eureka: client: service-url: defaultZone: http://eureka-service:8761/eureka/ 步骤 2：构建 Docker 镜像 2.1 Eureka Server Dockerfile 在 ~/eureka-server 下创建 Dockerfile：\n1 2 3 4 5 FROM openjdk:17-jdk-slim WORKDIR /app COPY target/eureka-server-0.0.1-SNAPSHOT.jar app.jar EXPOSE 8761 ENTRYPOINT [\u0026#34;java\u0026#34;, \u0026#34;-jar\u0026#34;, \u0026#34;app.jar\u0026#34;] 构建：\n1 2 3 cd ~/eureka-server mvn clean package docker build -t eureka-server:latest . 2.2 Admin Service Dockerfile 在 ~/admin-service 下创建 Dockerfile：\n1 2 3 4 5 FROM openjdk:17-jdk-slim WORKDIR /app COPY target/admin-service-0.0.1-SNAPSHOT.jar app.jar EXPOSE 8081 ENTRYPOINT [\u0026#34;java\u0026#34;, \u0026#34;-jar\u0026#34;, \u0026#34;app.jar\u0026#34;] 构建：\n1 2 3 cd ~/admin-service mvn clean package docker build -t admin-service:latest . 2.3 User Service Dockerfile 在 ~/user-service 下创建 Dockerfile：\n1 2 3 4 5 FROM openjdk:17-jdk-slim WORKDIR /app COPY target/user-service-0.0.1-SNAPSHOT.jar app.jar EXPOSE 8082 ENTRYPOINT [\u0026#34;java\u0026#34;, \u0026#34;-jar\u0026#34;, \u0026#34;app.jar\u0026#34;] 构建：\n1 2 3 cd ~/user-service mvn clean package docker build -t user-service:latest . 2.4 验证镜像 1 docker images 步骤 3：Kubernetes 部署 在 ~/ 下创建 k8s-deployments.yml：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 apiVersion: v1 kind: Service metadata: name: eureka-service spec: selector: app: eureka ports: - protocol: TCP port: 8761 targetPort: 8761 type: NodePort --- apiVersion: apps/v1 kind: Deployment metadata: name: eureka-deployment spec: replicas: 1 selector: matchLabels: app: eureka template: metadata: labels: app: eureka spec: containers: - name: eureka image: eureka-server:latest imagePullPolicy: Never ports: - containerPort: 8761 env: - name: EUREKA_INSTANCE_HOSTNAME value: \u0026#34;eureka-service\u0026#34; --- apiVersion: v1 kind: Service metadata: name: admin-service spec: selector: app: admin ports: - protocol: TCP port: 8081 targetPort: 8081 type: NodePort --- apiVersion: apps/v1 kind: Deployment metadata: .observe name: admin-deployment spec: replicas: 1 selector: matchLabels: app: admin template: metadata: labels: app: admin spec: containers: - name: admin image: admin-service:latest imagePullPolicy: Never ports: - containerPort: 8081 env: - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE value: \u0026#34;http://eureka-service:8761/eureka/\u0026#34; --- apiVersion: v1 kind: Service metadata: name: user-service spec: selector: app: user ports: - protocol: TCP port: 8082 targetPort: 8082 type: NOdePost --- apiVersion: apps/v1 kind: Deployment metadata: name: user-deployment spec: replicas: 1 selector: matchLabels: app: user template: metadata: labels: app: user spec: containers: - name: user image: user-service:latest imagePullPolicy: Never ports: - containerPort: 8082 env: - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE value: \u0026#34;http://eureka-service:8761/eureka/\u0026#34; 部署 1 kubectl apply -f ~/k8s-deployments.yml 验证 检查 Pod：\n1 kubectl get pods 确认 eureka-deployment-*、admin-deployment-* 和 user-deployment-* 为 Running。\n检查服务：\n1 kubectl get services 访问 Eureka 仪表板：\n1 minikube service eureka-service --url 在浏览器打开返回的 URL，确认服务注册。\n步骤 4：测试 API 暴露 Admin Service：\n1 minikube service admin-service --url 测试添加用户：\n1 curl -X POST http://\u0026lt;admin-service-url\u0026gt;:8081/api/admin/users -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;testuser\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;testpass\u0026#34;}\u0026#39; 应返回 用户添加成功。\n测试失败情况：\n1 curl -X POST http://\u0026lt;admin-service-url\u0026gt;:8081/api/admin/users -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;testpass\u0026#34;}\u0026#39; 应返回 用户名或密码不能为空。\n","date":"0001-01-01T00:00:00Z","permalink":"https://ztsCream.github.io/p/","title":""}]