[{"content":"在 Minikube 上部署 Eureka 微服务架构 本指南详细说明如何使用 Spring Boot 开发 Eureka Server、Admin Service 和 User Service 三个微服务，并通过 Docker 和 Kubernetes（Minikube）部署。包括服务注册、API 开发、Docker 镜像构建和 Kubernetes 部署的完整步骤。\n环境准备 假设您在 minikube-user@iZgc71t4gsaxrqcyesrotqZ:~$ 环境下操作，并已安装以下工具：\nJava 17 Maven Docker kubectl Minikube 验证环境 运行以下命令确认环境：\n1 2 3 4 5 java -version # 应显示 Java 17 mvn -v # 应显示 Maven 版本 docker --version # 应显示 Docker 版本 minikube status # 确保 Minikube 运行 kubectl version # 确认 kubectl 已安装 若缺少工具，安装示例：\n1 2 3 4 5 6 7 8 9 10 # 安装 Java 17 sudo apt update sudo apt install openjdk-17-jdk # 安装 Maven sudo apt install maven # 安装 Docker sudo apt install docker.io sudo usermod -aG docker minikube-user 启动 Minikube（若未启动）：\n1 minikube start 配置 Minikube 使用本地 Docker：\n1 eval $(minikube docker-env) 步骤 1：创建 Spring Boot 项目 为 Eureka Server、Admin Service 和 User Service 创建三个独立项目。\n1.1 项目目录结构 1 mkdir -p ~/eureka-server ~/admin-service ~/user-service 1.2 Eureka Server 生成项目：\n1 2 cd ~/eureka-server mvn archetype:generate -DgroupId=com.example.eureka -DartifactId=eureka-server -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false POM 文件（~/eureka-server/pom.xml）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.example.eureka\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;eureka-server\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;eureka-server\u0026lt;/name\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.2.5\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-netflix-eureka-server\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2023.0.3\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; 主类（~/eureka-server/src/main/java/com/example/eureka/EurekaServerApplication.java）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 package com.example.eureka; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; @SpringBootApplication @EnableDiscoveryClient public class EurekaServerApplication { public static void main(String[] args) { SpringApplication.run(EurekaServerApplication.class, args); } } 配置文件（~/eureka-server/src/main/resources/application.yml）：\n1 2 3 4 5 6 7 8 server: port: 8761 eureka: instance: hostname: eureka-service client: register-with-eureka: false fetch-registry: false 1.3 Admin Service 生成项目：\n1 2 cd ~/admin-service mvn archetype:generate -DgroupId=com.example.admin -DartifactId=admin-service -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false POM 文件（~/admin-service/pom.xml）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.example.admin\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;admin-service\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;admin-service\u0026lt;/name\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.2.5\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-netflix-eureka-client\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-validation\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2023.0.3\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; 主类（~/admin-service/src/main/java/com/example/admin/AdminServiceApplication.java）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package com.example.admin; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.loadbalancer.LoadBalanced; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.context.annotation.Bean; import org.springframework.web.client.RestTemplate; @SpringBootApplication @EnableDiscoveryClient public class AdminServiceApplication { public static void main(String[] args) { SpringApplication.run(AdminServiceApplication.class, args); } @Bean @LoadBalanced public RestTemplate restTemplate() { return new RestTemplate(); } } 控制器（~/admin-service/src/main/java/com/example/admin/controller/UserController.java）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 package com.example.admin.controller; import jakarta.validation.constraints.NotBlank; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.client.RestTemplate; @RestController @RequestMapping(\u0026#34;/api/admin\u0026#34;) public class UserController { @Autowired private RestTemplate restTemplate; @PostMapping(\u0026#34;/users\u0026#34;) public ResponseEntity\u0026lt;String\u0026gt; addUser(@RequestBody UserDTO userDTO) { if (userDTO.getUsername() == null || userDTO.getUsername().isEmpty() || userDTO.getPassword() == null || userDTO.getPassword().isEmpty()) { return ResponseEntity.badRequest().body(\u0026#34;用户名或密码不能为空\u0026#34;); } String userServiceUrl = \u0026#34;http://user-service/api/users\u0026#34;; ResponseEntity\u0026lt;String\u0026gt; response = restTemplate.postForEntity(userServiceUrl, userDTO, String.class); return ResponseEntity.ok(response.getBody()); } public static class UserDTO { @NotBlank(message = \u0026#34;用户名不能为空\u0026#34;) private String username; @NotBlank(message = \u0026#34;密码不能为空\u0026#34;) private String password; public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String get輸入password() { return password; } public void setPassword(String password) { this.password = password; } } } 配置文件（~/admin-service/src/main/resources/application.yml）：\n1 2 3 4 5 6 7 8 9 server: port: 8081 spring: application: name: admin-service eureka: client: service-url: defaultZone: http://eureka-service:8761/eureka/ 1.4 User Service 生成项目：\n1 2 cd ~/user-service mvn archetype:generate -DgroupId=com.example.user -DartifactId=user-service -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false POM 文件（~/user-service/pom.xml）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.example.user\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;user-service\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;user-service\u0026lt;/name\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.2.5\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-netflix-eureka-client\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-data-jpa\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.h2database\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;h2\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2023.0.3\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; 主类（~/user-service/src/main/java/com/example/user/UserServiceApplication.java）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 package com.example.user; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; @SpringBootApplication @EnableDiscoveryClient public class UserServiceApplication { public static void main(String[] args) { SpringApplication.run(UserServiceApplication.class, args); } } 实体类（~/user-service/src/main/java/com/example/user/entity/User.java）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 package com.example.user.entity; import jakarta.persistence.Entity; import jakarta.persistence.GeneratedValue; import jakarta.persistence.GenerationType; import jakarta.persistence.Id; @Entity public class User { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; private String username; private String password; public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } } 仓库接口（~/user-service/src/main/java/com/example/user/repository/UserRepository.java）：\n1 2 3 4 5 6 7 package com.example.user.repository; import com.example.user.entity.User; import org.springframework.data.jpa.repository.JpaRepository; public interface UserRepository extends JpaRepository\u0026lt;User, Long\u0026gt; { } 控制器（~/user-service/src/main/java/com/example/user/controller/UserController.java）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 package com.example.user.controller; import com.example.user.entity.User; import com.example.user.repository.UserRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\u0026#34;/api/users\u0026#34;) public class UserController { @Autowired private UserRepository userRepository; @PostMapping public ResponseEntity\u0026lt;String\u0026gt; addUser(@RequestBody UserDTO userDTO) { User user = new User(); user.setUsername(userDTO.getUsername()); user.setPassword(userDTO.getPassword()); userRepository.save(user); return ResponseEntity.ok(\u0026#34;用户添加成功\u0026#34;); } public static class UserDTO { private String username; private String password; public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } } } 配置文件（~/user-service/src/main/resources/application.yml）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 server: port: 8082 spring: application: name: user-service datasource: url: jdbc:h2:mem:userdb driver-class-name: org.h2.Driver username: sa password: jpa: database-platform: org.hibernate.dialect.H2Dialect hibernate: ddl-auto: update eureka: client: service-url: defaultZone: http://eureka-service:8761/eureka/ 步骤 2：构建 Docker 镜像 2.1 Eureka Server Dockerfile 在 ~/eureka-server 下创建 Dockerfile：\n1 2 3 4 5 FROM openjdk:17-jdk-slim WORKDIR /app COPY target/eureka-server-0.0.1-SNAPSHOT.jar app.jar EXPOSE 8761 ENTRYPOINT [\u0026#34;java\u0026#34;, \u0026#34;-jar\u0026#34;, \u0026#34;app.jar\u0026#34;] 构建：\n1 2 3 cd ~/eureka-server mvn clean package docker build -t eureka-server:latest . 2.2 Admin Service Dockerfile 在 ~/admin-service 下创建 Dockerfile：\n1 2 3 4 5 FROM openjdk:17-jdk-slim WORKDIR /app COPY target/admin-service-0.0.1-SNAPSHOT.jar app.jar EXPOSE 8081 ENTRYPOINT [\u0026#34;java\u0026#34;, \u0026#34;-jar\u0026#34;, \u0026#34;app.jar\u0026#34;] 构建：\n1 2 3 cd ~/admin-service mvn clean package docker build -t admin-service:latest . 2.3 User Service Dockerfile 在 ~/user-service 下创建 Dockerfile：\n1 2 3 4 5 FROM openjdk:17-jdk-slim WORKDIR /app COPY target/user-service-0.0.1-SNAPSHOT.jar app.jar EXPOSE 8082 ENTRYPOINT [\u0026#34;java\u0026#34;, \u0026#34;-jar\u0026#34;, \u0026#34;app.jar\u0026#34;] 构建：\n1 2 3 cd ~/user-service mvn clean package docker build -t user-service:latest . 2.4 验证镜像 1 docker images 步骤 3：Kubernetes 部署 在 ~/ 下创建 k8s-deployments.yml：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 apiVersion: v1 kind: Service metadata: name: eureka-service spec: selector: app: eureka ports: - protocol: TCP port: 8761 targetPort: 8761 type: NodePort --- apiVersion: apps/v1 kind: Deployment metadata: name: eureka-deployment spec: replicas: 1 selector: matchLabels: app: eureka template: metadata: labels: app: eureka spec: containers: - name: eureka image: eureka-server:latest imagePullPolicy: Never ports: - containerPort: 8761 env: - name: EUREKA_INSTANCE_HOSTNAME value: \u0026#34;eureka-service\u0026#34; --- apiVersion: v1 kind: Service metadata: name: admin-service spec: selector: app: admin ports: - protocol: TCP port: 8081 targetPort: 8081 type: NodePort --- apiVersion: apps/v1 kind: Deployment metadata: .observe name: admin-deployment spec: replicas: 1 selector: matchLabels: app: admin template: metadata: labels: app: admin spec: containers: - name: admin image: admin-service:latest imagePullPolicy: Never ports: - containerPort: 8081 env: - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE value: \u0026#34;http://eureka-service:8761/eureka/\u0026#34; --- apiVersion: v1 kind: Service metadata: name: user-service spec: selector: app: user ports: - protocol: TCP port: 8082 targetPort: 8082 type: NOdePost --- apiVersion: apps/v1 kind: Deployment metadata: name: user-deployment spec: replicas: 1 selector: matchLabels: app: user template: metadata: labels: app: user spec: containers: - name: user image: user-service:latest imagePullPolicy: Never ports: - containerPort: 8082 env: - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE value: \u0026#34;http://eureka-service:8761/eureka/\u0026#34; 部署 1 kubectl apply -f ~/k8s-deployments.yml 验证 检查 Pod：\n1 kubectl get pods 确认 eureka-deployment-*、admin-deployment-* 和 user-deployment-* 为 Running。\n检查服务：\n1 kubectl get services 访问 Eureka 仪表板：\n1 minikube service eureka-service --url 在浏览器打开返回的 URL，确认服务注册。\n步骤 4：测试 API 暴露 Admin Service：\n1 minikube service admin-service --url 测试添加用户：\n1 curl -X POST http://\u0026lt;admin-service-url\u0026gt;:8081/api/admin/users -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;testuser\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;testpass\u0026#34;}\u0026#39; 应返回 用户添加成功。\n测试失败情况：\n1 curl -X POST http://\u0026lt;admin-service-url\u0026gt;:8081/api/admin/users -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;testpass\u0026#34;}\u0026#39; 应返回 用户名或密码不能为空。\n","date":"2025-07-31T20:22:39+08:00","permalink":"https://ztsCream.github.io/p/%E5%9C%A8minikube%E4%B8%8A%E9%83%A8%E7%BD%B2eureka%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/","title":"在Minikube上部署Eureka微服务架构"},{"content":"大模型应用开发极简入门：基于GPT-4和ChatGPT “如果你在路口遇到了岔路口，那就走小路。”\n项目概述 语言：python\n技术栈 Python TensorFlow 机器学习算法 总结 项目实践的经验和收获\u0026hellip;\n","date":"2025-07-31T11:03:11+08:00","permalink":"https://ztsCream.github.io/p/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E5%9F%BA%E4%BA%8Egpt-4%E5%92%8Cchatgpt/","title":"大模型应用开发极简入门：基于GPT-4和ChatGPT"},{"content":"I love you 这是一篇生活随笔文章。\n生活感悟 在这里分享您的生活感悟\u0026hellip;\n心情记录 记录生活中的美好时刻\u0026hellip;\n","date":"2025-07-31T09:55:45+08:00","permalink":"https://ztsCream.github.io/p/newnew/","title":"Newnew"},{"content":"Hugo博客搭建指南 简介 Hugo是一个用Go语言编写的静态网站生成器，具有速度快、功能强大、易于使用等特点。\n安装Hugo Windows安装 下载Hugo Extended版本 解压到指定目录 添加到系统PATH 创建新站点 1 2 hugo new site myblog cd myblog 选择主题 Hugo有丰富的主题可供选择，推荐使用Stack主题：\n1 git clone https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack 配置站点 在hugo.yaml中配置站点信息：\n1 2 3 baseurl: https://yourdomain.com title: 我的博客 theme: hugo-theme-stack 创建内容 1 hugo new post/my-first-post.md 本地预览 1 hugo server -D 部署 GitHub Pages 创建GitHub仓库 配置GitHub Actions 推送代码自动部署 总结 Hugo是一个优秀的静态网站生成器，适合搭建个人博客、技术文档等网站。\n","date":"2025-01-01T10:00:00+08:00","permalink":"https://ztsCream.github.io/p/hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/","title":"Hugo博客搭建指南"}]